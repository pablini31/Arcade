import dotenv from 'dotenv';
import connectDB from './src/config/database.js';
import Hero from './src/models/Hero.js';
import Mascota from './src/models/Mascota.js';

// Cargar variables de entorno
dotenv.config({ path: './config.env' });

async function testMigration() {
    try {
        console.log('üß™ Iniciando pruebas de migraci√≥n...');
        
        // Conectar a MongoDB
        await connectDB();
        console.log('‚úÖ Conexi√≥n establecida');
        
        // Contar documentos
        const heroCount = await Hero.countDocuments();
        const mascotaCount = await Mascota.countDocuments();
        
        console.log(`\nüìä Estad√≠sticas de la base de datos:`);
        console.log(`   üë• H√©roes: ${heroCount}`);
        console.log(`   üêæ Mascotas: ${mascotaCount}`);
        
        // Obtener algunos ejemplos
        const heroes = await Hero.find().limit(3);
        const mascotas = await Mascota.find().limit(3);
        
        console.log(`\nüë• Primeros 3 h√©roes:`);
        heroes.forEach(hero => {
            console.log(`   - ${hero.alias} (${hero.nombre}) de ${hero.ciudad}`);
        });
        
        console.log(`\nüêæ Primeras 3 mascotas:`);
        mascotas.forEach(mascota => {
            console.log(`   - ${mascota.nombre} (${mascota.tipo}) - ${mascota.disponible ? 'Disponible' : 'Adoptada'}`);
        });
        
        // Probar consultas espec√≠ficas
        const mascotasDisponibles = await Mascota.getDisponibles();
        const mascotasAdoptadas = await Mascota.find({ adoptadoPor: { $ne: null } });
        
        console.log(`\nüè† Mascotas disponibles: ${mascotasDisponibles.length}`);
        console.log(`üë§ Mascotas adoptadas: ${mascotasAdoptadas.length}`);
        
        // Probar b√∫squedas
        const perros = await Mascota.getByTipo('Perro');
        const gatos = await Mascota.getByTipo('Gato');
        
        console.log(`\nüêï Perros: ${perros.length}`);
        console.log(`üê± Gatos: ${gatos.length}`);
        
        // Probar personalidades
        const amigables = await Mascota.getByPersonalidad('amigable');
        console.log(`üòä Mascotas amigables: ${amigables.length}`);
        
        // Probar b√∫squeda de h√©roes
        const heroesConMascotas = await Hero.find().populate('mascotas');
        const heroesConMascotasCount = heroesConMascotas.filter(h => h.mascotas.length > 0).length;
        
        console.log(`\nüë• H√©roes con mascotas: ${heroesConMascotasCount}`);
        
        // Verificar integridad
        console.log(`\nüîç Verificando integridad de datos...`);
        
        const mascotasSinHeroe = await Mascota.find({
            adoptadoPor: { $ne: null }
        });
        
        let erroresIntegridad = 0;
        for (const mascota of mascotasSinHeroe) {
            const hero = await Hero.findOne({ id: mascota.adoptadoPor });
            if (!hero) {
                console.log(`‚ö†Ô∏è Mascota ${mascota.nombre} tiene adoptadoPor=${mascota.adoptadoPor} pero el h√©roe no existe`);
                erroresIntegridad++;
            }
        }
        
        if (erroresIntegridad === 0) {
            console.log(`‚úÖ Integridad de datos verificada - Sin errores`);
        } else {
            console.log(`‚ùå Se encontraron ${erroresIntegridad} errores de integridad`);
        }
        
        console.log(`\nüéâ Pruebas completadas exitosamente!`);
        
    } catch (error) {
        console.error('‚ùå Error en las pruebas:', error.message);
    } finally {
        // Cerrar conexi√≥n
        await mongoose.connection.close();
        console.log('üîå Conexi√≥n cerrada');
        process.exit(0);
    }
}

// Ejecutar pruebas
testMigration(); 